if not game:IsLoaded() then
    game.Loaded:Wait()
end

local inventory = game:GetService("ReplicatedStorage").Remotes.GetInventory:InvokeServer()
local plr = game.Players.LocalPlayer
local HttpService = game:GetService("HttpService")
discord_id_str = string.format("%.0f", _G.Config.discord_id)
getgenv().data = {
    Username = plr.Name,
    units = {},
    note = _G.Config.Note,
    user_id = _G.Config.UserID,
    Story = "",
    time = 0,
    Level = 0,
    Trait_Crystal = 0,
    first_gem = nil,
    risky_dice = 0,
    last_gem = 0,
    hour = 0,
    min = 0,
    sec = 0,
    discord_id = discord_id_str,
    Status = "Lobby",
    Frost_Bind = 0,
    Secret = {},
    equipped = {},
    wave = 0
}
function time()
    local scripttime = game.Workspace.DistributedGameTime
    local seconds = scripttime % 60
    local minutes = math.floor(scripttime / 60 % 60)
    local hours = math.floor(scripttime / 3600)
    return seconds, minutes, hours
end

function secret()
    local a = require(game:GetService("ReplicatedStorage").Modules.Bins.UnitData)
    local secret = {}
    for i, v in next, a do
        if v.Rarity == 6 then
            table.insert(secret, i)
        end
    end
    local name = {}
    for i, v in next, game:GetService("ReplicatedStorage").Remotes.GetInventory:InvokeServer().Units do
        if table.find(secret, v.Type) then
            table.insert(name, v.Type)
        end
    end
    return name
end

function getwave()
    if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("WaveTopBar") then
        return (game:GetService("Players").LocalPlayer.PlayerGui.WaveTopBar.Wave.WaveFrame.TextLabel.Text)
    end
end

function getequip()
    local save = {}
    local save2 = {}
    for i1, v1 in next, game:GetService("ReplicatedStorage").Remotes.GetInventory:InvokeServer().EquippedUnits do
        table.insert(save, v1)
    end
    for i, v in next, game:GetService("ReplicatedStorage").Remotes.GetInventory:InvokeServer().Units do
        if table.find(save, i) then
            table.insert(save2, v.Type)
        end
    end
    return save2
end

function getunits()
    local a = {}
    for i, v in pairs(inventory.Units) do
        table.insert(a, v.Type)
    end
    return a
end

function getinfomap()
    local a = 0
    for i, v in pairs(inventory.Chapters) do
        if v.Unlocked == true and i ~= "FooshaVillage_Infinite" and string.find(tostring(i), "FooshaVillage") then
            a = a + 1
        end
    end
    return a
end

function getwave()
    if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("WaveTopBar") then
        return (game:GetService("Players").LocalPlayer.PlayerGui.WaveTopBar.Wave.WaveFrame.TextLabel.Text)
    end
end

while wait() do
    local a, b = pcall(function()
        getgenv().data.units = getunits()
        local seconds, minutes, hours = time()
        getgenv().data.Story = getinfomap() .. "/6"
        getgenv().data.Level = inventory.Level
        getgenv().data.sec = math.floor(seconds)
        getgenv().data.min = minutes
        getgenv().data.hour = hours
        getgenv().data.time =  getgenv().data.time + 1
        if #secret() >= 1 then
            getgenv().data.Secret = secret()
        end
        if getgenv().data.first_gem == nil then
            getgenv().data.first_gem = inventory.Currencies.Gems
        else
            getgenv().data.first_gem = inventory.Currencies.Gems
        end
        getgenv().data.equipped = getequip()
        getgenv().data.Frost_Bind = inventory.Items["Frost Bind"] or 0
        getgenv().data.Trait_Crystal = inventory.Items["Trait Crystal"] or 0
        getgenv().data.risky_dice = inventory.Items["Risky Dice"] or 0

        if getgenv().data.first_gem > getgenv().data.last_gem then
            getgenv().data.first_gem = getgenv().data.last_gem
        end

        getgenv().data.last_gem = inventory.Currencies.Gems

        if game.PlaceId == 17764698696 then
            getgenv().data.Status = "Lobby"
        else
            getgenv().data.Status = "In Game"
        end
        if getgenv().data.Status == "In Game" then
            getgenv().data.wave = getwave()
        else
            getgenv().data.wave = "Waiting Join Map"
        end
        local aa = request({
            Url = "https://yummytrackstat.com/api/anime-defenders/trackings",
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode(getgenv().data)
        })
        writefile(plr.Name .. "ad.json", game:GetService('HttpService'):JSONEncode(data))
        table.foreach(getgenv().data, print)
        table.foreach(getgenv().data.equipped, print)
        table.foreach(getgenv().data.Secret, print)
        wait(50)
    end)
    if b then
        error(b)
    end
end
